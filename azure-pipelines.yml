# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
    - task: UseDotNet@2
      inputs:
        version: '3.0.x'
        packageType: runtime


    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        version: 3.0.x
        performMultiLevelLookup: true

    # do this before your build tasks

    - task: UseDotNet@2
      inputs:
        command: restore
        projects: '**/*.csproj'
        feedsToUse: config
        nugetConfigPath: NuGet.config    # Relative to root of the repository
        externalFeedCredentials: <Name of the NuGet service connection>
    # ...


    - task: UseDotNet@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration Release' # Update this to match your need

    - task: UseDotNet@2
      displayName: 'Install dotnetsay'
      inputs:
        command: custom
        custom: tool
        arguments: 'install -g dotnetsay'

    # ...
    # do this after other tasks such as building
    - task: UseDotNet@2
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'



    # ...
    # do this after other tasks such as building
    - task: UseDotNet@2
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

    # ...
    # do this after your tests have run
    - script: dotnet test "Dot net Core APP" --logger trx --collect "Code coverage"
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'

    - task: UseDotNet@2
      inputs:
        command: test
        projects: Refit.Tests/Refit.Tests.csproj
        arguments: -c $(BuildConfiguration) --settings $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
      displayName: Run Tests

    - task: UseDotNet@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool
      
    - script: ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
      displayName: Create reports
      
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml


    - task: UseDotNet@2
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True

    # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'myWebsiteName'



    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'
